knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(XML)
library(rvest)
library(RSelenium)
library(RCurl)
url <- "https://cran.r-project.org/web/views/Bayesian.html"
BayesianPackages <-url %>%
read_html()%>%
html_nodes(xpath = "/html/body/ul[1]/li")  %>% #unique xpath to pull in all individually
html_text()
BayesianPackages # we now have all Bayesian Packages listed on the webpage
BayesianPackages <- data.frame(BayesianPackages)
names(BayesianPackages) <- "Packages"
BayesianPackages$Packages <- as.character(BayesianPackages$Packages)
baseURL <- "https://cran.r-project.org/web/packages/"
URLs <- paste(baseURL, BayesianPackages$Packages, "/index.html", sep = "") #makes URLs that you can navigate to
URLs <- data.frame(URLs)
URLs$URLs <- as.character(URLs$URLs)
BayesianPackages <- cbind(BayesianPackages, URLs)
start.time <- Sys.time()
mylist.names <- BayesianPackages$Packages
HTMLs <- as.list(rep(NA, length(mylist.names)))
names(HTMLs) <- mylist.names
for(i in 1:nrow(URLs)){
HTMLs[[i]] <- getURL(URLs$URLs[i])
}
end.time <- Sys.time()
end.time - start.time
save(HTMLs, file = "HTMLs.rda")
HTMLs[[1]]
View(HTMLs)
HTMLs['revdbayes']
HTMLs['SampleSizeMeans']
ATEST <- list(HTMLs['revdbayes'], HTMLs['SampleSizeMeans'])
length(ATEST)
PackageDesc <- list()
read_html(ATEST[[1]])
ATEST[[1]] %>% read_html()
ATEST[[1]][1] %>% read_html()
ATEST[[1]][1]
ATEST[[1]][2]
ATEST[[1]][3]
View(ATEST)
ATEST[1]
ATEST[1][1]
read_html(ATEST[1][1])
str(ATEST[[1]])
read_html(HTMLs[[1]])
View(HTMLs)
rm(ATEST)
View(HTMLs)
PackageDesc[[i]] <-HTMLs[[i]] %>%
read_html()%>%
html_nodes(xpath = "/html/body/p[1]") %>%
html_text()}
for(i in 1:5){
PackageDesc[[i]] <-HTMLs[[i]] %>%
read_html()%>%
html_nodes(xpath = "/html/body/p[1]") %>%
html_text()
}
PackageDesc[[1]]
View(PackageDesc)
PackageDesc[[2]]
PackageDesc[[3]]
PackageDesc[[4]]
PackageDesc[[5]]
View(BayesianPackages)
View(BayesianPackages)
View(PackageDesc)
View(HTMLs)
PackageDesc[[4]]
#Scrape Package Descriptions
PackageDesc <- list()
for(i in 1:5){
PackageDesc[[i]] <-HTMLs[[i]] %>%
read_html()%>%
html_nodes(xpath = "/html/body/p[1]") %>%
html_text()
}
#Clean Package Descriptions
PackageDesc[[4]]
PackageDesc[[5]]
View(PackageDesc)
PackageDesc[[3]]
#Clean Package Descriptions
for(i in 1:length(PackageDesc)){
PackageDesc[[i]] <- PackageDesc[[i]] %>%
gsub("\n", " ")
}
PackageDesc[[3]]
PackageDesc[[1]]
PackageDesc[[2]]
#Scrape Package Descriptions
mylist.names <- BayesianPackages$Packages
PackageDesc <- as.list(rep(NA, length(mylist.names)))
names(PackageDesc) <- mylist.names
for(i in 1:5){
PackageDesc[[i]] <-HTMLs[[i]] %>%
read_html()%>%
html_nodes(xpath = "/html/body/p[1]") %>%
html_text()
}
#Clean Package Descriptions
for(i in 1:length(PackageDesc)){
PackageDesc[[i]] <- PackageDesc[[i]] %>%
str_replace_all("\n", "")
}
PackageDesc[[1]]
PackageDesc[[2]]
PackageDesc[[3]]
PackageDesc[[4]]
PackageDesc[[5]]
PackageDesc[[6]]
#Scrape Package Descriptions
mylist.names <- BayesianPackages$Packages
PackageDesc <- as.list(rep(NA, length(mylist.names)))
names(PackageDesc) <- mylist.names
for(i in 1:5){
PackageDesc[[i]] <-HTMLs[[i]] %>%
read_html()%>%
html_nodes(xpath = "/html/body/p[1]") %>%
html_text()
}
#Clean Package Descriptions
for(i in 1:length(PackageDesc)){
PackageDesc[[i]] <- PackageDesc[[i]] %>%
str_replace_all("\n", "") %>%
str_replace_all("\\s+", " ")%>%
str_replace_all("^\\s", "") %>%
str_replace_all("\\s$", "")
}
PackageDesc[[5]]
PackageDesc[[4]]
PackageDesc[[4]]
PackageDesc[[3]]
PackageDesc[[2]]
PackageDesc[[1]]
#Scrape Package Descriptions
mylist.names <- BayesianPackages$Packages
PackageDesc <- as.list(rep(NA, length(mylist.names)))
names(PackageDesc) <- mylist.names
for(i in 1:length(HTMLs)){
PackageDesc[[i]] <-HTMLs[[i]] %>%
read_html()%>%
html_nodes(xpath = "/html/body/p[1]") %>%
html_text()
}
#Clean Package Descriptions
for(i in 1:length(PackageDesc)){
PackageDesc[[i]] <- PackageDesc[[i]] %>%
str_replace_all("\n", "") %>%
str_replace_all("\\s+", " ")%>%
str_replace_all("^\\s", "") %>%
str_replace_all("\\s$", "")
}
PackageDesc[[1]]
View(PackageDesc)
PackageDesc[[100]]
PackageDesc[[135]]
unlist(PackageDesc)
do.call(rbind.data.frame, PackageDesc)
X<-do.call(rbind.data.frame, PackageDesc)
View(X)
View(BayesianPackages)
#unlist Package Descriptions into DF
PackageDesc<-do.call(rbind.data.frame, PackageDesc)
View(PackageDesc)
names(PackageDesc) <- "Package Description"
#Scrape Package Summaries
mylist.names <- BayesianPackages$Packages
PackageSummaries <- as.list(rep(NA, length(mylist.names)))
names(PackageSummaries) <- mylist.names
for(i in 1:length(HTMLs)){
PackageSummaries[[i]] <-HTMLs[[i]] %>%
read_html()%>%
html_nodes(xpath = "//table[@summary][1]") %>%
html_table() %>%
data.frame(stringsAsFactors = FALSE)
}
View(PackageSummaries)
View(PackageDesc)
View(PackageSummaries)
PackageSummaries[[1]]
PackageSummaries[[1]]
transpose(PackageSummaries[[1]]
transpose(PackageSummaries[[1]])
data.frame(split(PackageSummaries[[1]][1:nrow(DemoList[[1]]), 2], PackageSummaries[[1]][1:nrow(DemoList[[1]]),1]))
data.frame(split(PackageSummaries[[1]][1:nrow(PackageSummaries[[1]]), 2], PackageSummaries[[1]][1:nrow(PackageSummaries[[1]]),1]))
#Clean Package Summaries
for(i in 1:length(PackageSummaries)){
PackageSummaries[[i]] <- PackageSummaries[[i]] %>%
str_replace_all("\n", "") %>%
str_replace_all("\\s+", " ")%>%
str_replace_all("^\\s", "") %>%
str_replace_all("\\s$", "")
}
#Scrape Package Summaries
mylist.names <- BayesianPackages$Packages
PackageSummaries <- as.list(rep(NA, length(mylist.names)))
names(PackageSummaries) <- mylist.names
for(i in 1:length(HTMLs)){
PackageSummaries[[i]] <-HTMLs[[i]] %>%
read_html()%>%
html_nodes(xpath = "//table[@summary][1]") %>%
html_table() %>%
data.frame(stringsAsFactors = FALSE)
}
PackageSummaries[[1]]
PackageSummaries[[1]][2]
str_replace_all("\n", "", PackageSummaries[[1]][2])
PackageSummaries[[1]][2])
PackageSummaries[[1]][2]
#Clean Package Summaries
for(i in 1:length(PackageSummaries)){
DemoList[[i]]<-data.frame(split(PackageSummaries[[i]][1:nrow(PackageSummaries[[i]]), 2],PackageSummaries[[i]][1:nrow(PackageSummaries[[i]]),1]))
} #Loop that switches the dataframe to a longer format
#Clean Package Summaries
for(i in 1:length(PackageSummaries)){
PackageSummaries[[i]]<-data.frame(split(PackageSummaries[[i]][1:nrow(PackageSummaries[[i]]), 2],PackageSummaries[[i]][1:nrow(PackageSummaries[[i]]),1]))
} #Loop that switches the dataframe to a longer format
data.frame(split(PackageSummaries[[1]][1:nrow(PackageSummaries[[1]]), 2],PackageSummaries[[1]][1:nrow(PackageSummaries[[1]]),1]))
#Scrape Package Summaries
mylist.names <- BayesianPackages$Packages
PackageSummaries <- as.list(rep(NA, length(mylist.names)))
names(PackageSummaries) <- mylist.names
for(i in 1:length(HTMLs)){
PackageSummaries[[i]] <-HTMLs[[i]] %>%
read_html()%>%
html_nodes(xpath = "//table[@summary][1]") %>%
html_table() %>%
data.frame(stringsAsFactors = FALSE)
}
data.frame(split(PackageSummaries[[1]][1:nrow(PackageSummaries[[1]]), 2],PackageSummaries[[1]][1:nrow(PackageSummaries[[1]]),1]))
X <- data.frame(split(PackageSummaries[[1]][1:nrow(PackageSummaries[[1]]), 2],PackageSummaries[[1]][1:nrow(PackageSummaries[[1]]),1]))
View(X)
#Clean Package Summaries
for(i in 1:length(PackageSummaries)){
PackageSummaries[[i]]<-data.frame(split(PackageSummaries[[i]][1:nrow(PackageSummaries[[i]]), 2],PackageSummaries[[i]][1:nrow(PackageSummaries[[i]]),1]))
} #Loop that switches the dataframe to a longer format
data.frame(split(PackageSummaries[[2]][1:nrow(PackageSummaries[[1]]), 2],PackageSummaries[[2]][1:nrow(PackageSummaries[[2]]),1]))
X<-data.frame(split(PackageSummaries[[2]][1:nrow(PackageSummaries[[1]]), 2],PackageSummaries[[2]][1:nrow(PackageSummaries[[2]]),1]))
View(X)
#Scrape Package Summaries
mylist.names <- BayesianPackages$Packages
PackageSummaries <- as.list(rep(NA, length(mylist.names)))
names(PackageSummaries) <- mylist.names
for(i in 1:length(HTMLs)){
PackageSummaries[[i]] <-HTMLs[[i]] %>%
read_html()%>%
html_nodes(xpath = "//table[@summary][1]") %>%
html_table() %>%
data.frame(stringsAsFactors = FALSE)
}
PackageSummaries[[2]]
View(PackageSummaries)
BtoNA <- function(g){
g[g==""] <- NA
return(g)
} #function to turn blanks into NAs
#Scrape Package Summaries
mylist.names <- BayesianPackages$Packages
PackageSummaries <- as.list(rep(NA, length(mylist.names)))
names(PackageSummaries) <- mylist.names
for(i in 1:length(HTMLs)){
PackageSummaries[[i]] <-HTMLs[[i]] %>%
read_html()%>%
html_nodes(xpath = "//table[@summary][1]") %>%
html_table() %>%
data.frame(stringsAsFactors = FALSE)
}
DemoList <- lapply(PackageSummaries, BtoNA)#apply Blank to NA function to each dataframe in the list
rm(DemoList)
#Scrape Package Summaries
mylist.names <- BayesianPackages$Packages
PackageSummaries <- as.list(rep(NA, length(mylist.names)))
names(PackageSummaries) <- mylist.names
for(i in 1:length(HTMLs)){
PackageSummaries[[i]] <-HTMLs[[i]] %>%
read_html()%>%
html_nodes(xpath = "//table[@summary][1]") %>%
html_table() %>%
data.frame(stringsAsFactors = FALSE)
}
BtoNA <- function(g){
g[g==""] <- NA
return(g)
} #function to turn blanks into NAs
PackageSummaries <- lapply(PackageSummaries, BtoNA)#apply Blank to NA function to each dataframe in the list
PackageSummaries <- lapply(PackageSummaries, na.omit)#omit each blank row in the list
length(PackageSummaries)
View(PackageSummaries)
#Scrape Package Summaries
mylist.names <- BayesianPackages$Packages
PackageSummaries <- as.list(rep(NA, length(mylist.names)))
names(PackageSummaries) <- mylist.names
for(i in 1:length(HTMLs)){
PackageSummaries[[i]] <-HTMLs[[i]] %>%
read_html()%>%
html_nodes(xpath = "//table[@summary][1]") %>%
html_table() %>%
data.frame(stringsAsFactors = FALSE)
}
PackageSummaries[sapply(PackageSummariesGF, function(x) dim(x)[1]) > 0]
PackageSummaries[sapply(PackageSummaries, function(x) dim(x)[1]) > 0]
PackageSummaries <-PackageSummaries[sapply(PackageSummaries, function(x) dim(x)[1]) > 0]
#Clean Package Summaries
for(i in 1:length(PackageSummaries)){
PackageSummaries[[i]]<-data.frame(split(PackageSummaries[[i]][1:nrow(PackageSummaries[[i]]), 2],PackageSummaries[[i]][1:nrow(PackageSummaries[[i]]),1]))
} #Loop that switches the dataframe to a longer format
View(PackageSummaries)
PackageSummaries[[1]]
#Unified dataframe
PackageSummaries<- rbind.fill(PackageSummaries)
library(tidyverse)
library(plyr)
detach("package:tidyverse", unload=TRUE)
library(plyr)
library(tidyverse)
library(XML)
library(rvest)
library(RSelenium)
library(RCurl)
#Unified dataframe
PackageSummaries<- rbind.fill(PackageSummaries)
View(PackageSummaries)
View(PackageSummaries)
View(PackageSummaries)
View(PackageDesc)
PackageDesc[4]
PackageDesc[4,1]
#Scrape Package Descriptions
mylist.names <- BayesianPackages$Packages
PackageDesc <- as.list(rep(NA, length(mylist.names)))
names(PackageDesc) <- mylist.names
for(i in 1:length(HTMLs)){
PackageDesc[[i]] <-HTMLs[[i]] %>%
read_html()%>%
html_nodes(xpath = "/html/body/p[1]") %>%
html_text()
}
#Clean Package Descriptions
for(i in 1:length(PackageDesc)){
PackageDesc[[i]] <- PackageDesc[[i]] %>%
str_replace_all("\n", "") %>%
str_replace_all("\\s+", " ")%>%
str_replace_all("^\\s", "") %>%
str_replace_all("\\s$", "")
}
#unlist Package Descriptions into DF
PackageDesc<-do.call(rbind.data.frame, PackageDesc)
names(PackageDesc) <- "PackageDescription"
PackageDesc$PackageDescription <- as.character(PackageDescription)
PackageDesc$PackageDescription <- as.character(PackageDesc$PackageDescription)
PackageDesc[4]
PackageDesc[4,1]
PackageDesc <- PackageDesc %>%
filter(PackageDescription != "Your browser sent a request that this server could not understand.")
View(PackageDesc)
View(PackageSummaries)
#Scrape Package Descriptions
mylist.names <- BayesianPackages$Packages
PackageDesc <- as.list(rep(NA, length(mylist.names)))
names(PackageDesc) <- mylist.names
for(i in 1:length(HTMLs)){
PackageDesc[[i]] <-HTMLs[[i]] %>%
read_html()%>%
html_nodes(xpath = "/html/body/p[1]") %>%
html_text()
}
#Clean Package Descriptions
for(i in 1:length(PackageDesc)){
PackageDesc[[i]] <- PackageDesc[[i]] %>%
str_replace_all("\n", "") %>%
str_replace_all("\\s+", " ")%>%
str_replace_all("^\\s", "") %>%
str_replace_all("\\s$", "")
}
library(purrr)
/?map_df
?map_df
ans <- map_df(PackageDesc, ~as.data.frame(.x), .id="id")
View(ans)
ans <- map_df(PackageDesc, ~as.data.frame(.x), .id="Package")
View(ans)
#Make dataframe
PackageDesc<- map_df(PackageDesc, ~as.data.frame(.x), .id="Package")
rm(ans)
View(PackageDesc)
names(PackageDesc) <- c("Package","PackageDescription")
View(BayesianPackages)
PackageDesc$PackageDescription <- as.character(PackageDesc$PackageDescription)
PackageDesc <- PackageDesc %>%
filter(PackageDescription != "Your browser sent a request that this server could not understand.")
View(PackageDesc)
BayesianBase <- left_join(PackageDescription, PackageSummaries)
BayesianBase <- left_join(PackageDesc, PackageSummaries)
View(PackageDesc)
BayesianBase <-cbind(PackageDesc, PackageSummaries)
View(BayesianBase)
View(BayesianBase)
View(BayesianBase)
#Scrape Reverse Dependencies
mylist.names <- BayesianPackages$Packages
ReverseDepends <- as.list(rep(NA, length(mylist.names)))
names(ReverseDepends) <- mylist.names
for(i in 1:length(HTMLs)){
ReverseDepends[[i]] <-HTMLs[[i]] %>%
read_html()%>%
html_nodes(xpath = "//tr/td[contains(text(), 'Reverse')]/ancestor::table") %>%
html_table() %>%
data.frame(stringsAsFactors = FALSE)
}
View(ReverseDepends)
ReverseDepends <- ReverseDepends[sapply(PackageSummaries, function(x) dim(x)[1]) > 0]
#Remove empty dataframes from the list (Core Packages)
ReverseDepends <- ReverseDepends[sapply(ReverseDepends, function(x) dim(x)[1]) > 0]
#Scrape Reverse Dependencies
mylist.names <- BayesianPackages$Packages
ReverseDepends <- as.list(rep(NA, length(mylist.names)))
names(ReverseDepends) <- mylist.names
for(i in 1:length(HTMLs)){
ReverseDepends[[i]] <-HTMLs[[i]] %>%
read_html()%>%
html_nodes(xpath = "//tr/td[contains(text(), 'Reverse')]/ancestor::table") %>%
html_table() %>%
data.frame(stringsAsFactors = FALSE)
}
#Remove empty dataframes from the list (Core Packages)
ReverseDepends <- ReverseDepends[sapply(ReverseDepends, function(x) dim(x)[1]) > 0]
#Convert dataframes to useable format
for(i in 1:length(ReverseDepends)){
ReverseDepends[[i]]<-data.frame(split(ReverseDepends[[i]][1:nrow(ReverseDepends[[i]]), 2],ReverseDepends[[i]][1:nrow(ReverseDepends[[i]]),1]))
}
ReverseDepends[1]
ReverseDepends[3]
ReverseDepends[2]
map_df(ReverseDepends, ~as.data.frame(.x), .id="Package")
X <- map_df(ReverseDepends, ~as.data.frame(.x), .id="Package")
View(X)
#Make into one usable dataframe
X <- map_df(ReverseDepends, ~as.data.frame(.x), .id="Package")
#Make into one usable dataframe
ReverseDepends <- map_df(ReverseDepends, ~as.data.frame(.x), .id="Package")
rm(X)
View(ReverseDepends)
left_join(BayesianBase, ReverseDepends)
BayesianBase <- left_join(BayesianBase, ReverseDepends)
write.csv(BayesianBase, "BayesianBaseTable.csv")
